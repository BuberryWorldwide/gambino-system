'use client'

import { useState, useEffect } from 'react';

export default function AdminSettingsPage() {
  const [admin, setAdmin] = useState(null);
  const [loading, setLoading] = useState(true);
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const [stores, setStores] = useState([]);
  const [showCreateStore, setShowCreateStore] = useState(false);
  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  const [storeData, setStoreData] = useState({
    storeName: '',
    address: '',
    city: '',
    state: '',
    zipCode: '',
    phone: '',
    managerEmail: ''
  });

  useEffect(() => {
    const adminData = localStorage.getItem('adminData');
    const adminToken = localStorage.getItem('adminToken');
    
    if (!adminToken || !adminData) {
      window.location.href = '/admin';
      return;
    }

    const parsedAdmin = JSON.parse(adminData);
    setAdmin(parsedAdmin);
    
    if (parsedAdmin.role === 'store_owner') {
      loadOwnerStores(parsedAdmin);
    }
    
    setLoading(false);
  }, []);

  const loadOwnerStores = async (adminData) => {
    try {
      // Mock store data for the owner - replace with API call
      const ownerStores = [
        {
          storeId: 'nash_downtown_001',
          storeName: 'Nashville Downtown Gaming',
          address: '123 Broadway',
          city: 'Nashville',
          state: 'TN',
          zipCode: '37203',
          phone: '615-555-0123',
          status: 'active',
          createdAt: new Date('2024-06-15'),
          machineCount: 3,
          monthlyRevenue: 12500
        }
      ];
      setStores(ownerStores);
    } catch (error) {
      console.error('Failed to load stores:', error);
    }
  };

  const generateStoreId = (storeName, city, state) => {
    // Auto-generate standardized store ID
    const cityCode = city.toLowerCase().replace(/[^a-z]/g, '').substring(0, 4);
    const stateCode = state.toLowerCase();
    const nameCode = storeName.toLowerCase()
      .replace(/[^a-z]/g, '')
      .replace(/gaming|store|shop/g, '')
      .substring(0, 6);
    
    // Add random 3-digit number for uniqueness
    const randomNum = Math.floor(Math.random() * 900) + 100;
    
    return `${cityCode}_${nameCode}_${randomNum}`;
  };

  const handleCreateStore = async () => {
    if (!storeData.storeName || !storeData.city || !storeData.state) {
      setError('Store name, city, and state are required');
      return;
    }

    try {
      const generatedStoreId = generateStoreId(storeData.storeName, storeData.city, storeData.state);
      
      const adminToken = localStorage.getItem('adminToken');
      const response = await fetch('http://192.168.1.235:3001/api/admin/create-store', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${adminToken}`
        },
        body: JSON.stringify({
          ...storeData,
          storeId: generatedStoreId,
          ownerId: admin.id
        })
      });

      const result = await response.json();
      
      if (result.success) {
        setMessage(`‚úÖ Store created successfully! Store ID: ${generatedStoreId}`);
        setShowCreateStore(false);
        setStoreData({
          storeName: '',
          address: '',
          city: '',
          state: '',
          zipCode: '',
          phone: '',
          managerEmail: ''
        });
        loadOwnerStores(admin);
      } else {
        setError(result.error || 'Failed to create store');
      }
    } catch (error) {
      // For development, simulate store creation
      const generatedStoreId = generateStoreId(storeData.storeName, storeData.city, storeData.state);
      
      const newStore = {
        storeId: generatedStoreId,
        storeName: storeData.storeName,
        address: storeData.address,
        city: storeData.city,
        state: storeData.state,
        zipCode: storeData.zipCode,
        phone: storeData.phone,
        status: 'active',
        createdAt: new Date(),
        machineCount: 0,
        monthlyRevenue: 0
      };

      setStores(prev => [...prev, newStore]);
      setMessage(`‚úÖ Store created successfully! Store ID: ${generatedStoreId}`);
      setShowCreateStore(false);
      setStoreData({
        storeName: '',
        address: '',
        city: '',
        state: '',
        zipCode: '',
        phone: '',
        managerEmail: ''
      });
    }
  };

  const handleChangePassword = async () => {
    if (!passwordData.currentPassword || !passwordData.newPassword || !passwordData.confirmPassword) {
      setError('All password fields are required');
      return;
    }

    if (passwordData.newPassword !== passwordData.confirmPassword) {
      setError('New passwords do not match');
      return;
    }

    if (passwordData.newPassword.length < 8) {
      setError('New password must be at least 8 characters');
      return;
    }

    try {
      const adminToken = localStorage.getItem('adminToken');
      const response = await fetch('http://192.168.1.235:3001/api/admin/change-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${adminToken}`
        },
        body: JSON.stringify({
          currentPassword: passwordData.currentPassword,
          newPassword: passwordData.newPassword
        })
      });

      const result = await response.json();
      
      if (result.success) {
        setMessage('‚úÖ Password changed successfully');
        setPasswordData({ currentPassword: '', newPassword: '', confirmPassword: '' });
        setError('');
      } else {
        setError(result.error || 'Failed to change password');
      }
    } catch (error) {
      setError('Network error. Please try again.');
    }
  };

  const logout = () => {
    localStorage.removeItem('adminToken');
    localStorage.removeItem('adminData');
    window.location.href = '/';
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-white">Loading settings...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      {/* Header */}
      <div className="bg-gray-800 border-b border-gray-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-8">
              <h1 className="text-xl font-bold text-yellow-500">üé≤ Gambino Admin</h1>
              <nav className="flex space-x-4">
                <a href="/admin" className="text-gray-300 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                  Dashboard
                </a>
                <span className="bg-gray-700 text-white px-3 py-2 rounded-md text-sm font-medium">
                  Settings
                </span>
                {(admin?.role === 'store_owner' || admin?.role === 'store_manager') && (
                  <>
                    <a href="/admin/store/users" className="text-gray-300 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                      Store Users
                    </a>
                    <a href="/admin/store/machines" className="text-gray-300 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                      Machines
                    </a>
                  </>
                )}
              </nav>
            </div>
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-400">
                {admin?.firstName} {admin?.lastName} ({admin?.role?.replace('_', ' ')})
              </span>
              <button onClick={logout} className="bg-red-600 hover:bg-red-700 px-3 py-2 rounded-md text-sm font-medium">
                Logout
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <div className="mb-8">
          <h2 className="text-3xl font-bold text-white">‚öôÔ∏è Admin Settings</h2>
          <p className="text-gray-400 mt-2">Manage your admin account and store settings</p>
        </div>

        {/* Alert Messages */}
        {message && (
          <div className="bg-green-900/20 border border-green-500 text-green-300 p-4 rounded-lg mb-6">
            {message}
          </div>
        )}
        
        {error && (
          <div className="bg-red-900/20 border border-red-500 text-red-300 p-4 rounded-lg mb-6">
            {error}
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Profile Information */}
          <div className="bg-gray-800 border border-gray-700 rounded-xl p-6">
            <h3 className="text-xl font-bold text-white mb-6">üë§ Profile Information</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-2">Name</label>
                <div className="text-white bg-gray-700 p-3 rounded-md">
                  {admin?.firstName} {admin?.lastName}
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-2">Email</label>
                <div className="text-white bg-gray-700 p-3 rounded-md">
                  {admin?.email}
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-2">Role</label>
                <div className="text-white bg-gray-700 p-3 rounded-md">
                  <span className={`px-3 py-1 rounded-full text-sm font-bold ${
                    admin?.role === 'super_admin' 
                      ? 'bg-red-900/30 text-red-400 border border-red-500/30'
                      : admin?.role === 'store_owner'
                      ? 'bg-blue-900/30 text-blue-400 border border-blue-500/30'
                      : 'bg-green-900/30 text-green-400 border border-green-500/30'
                  }`}>
                    {admin?.role?.replace('_', ' ').toUpperCase()}
                  </span>
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-2">Admin ID</label>
                <div className="text-gray-300 bg-gray-700 p-3 rounded-md font-mono text-sm">
                  {admin?.id}
                </div>
              </div>
            </div>
          </div>

          {/* Change Password */}
          <div className="bg-gray-800 border border-gray-700 rounded-xl p-6">
            <h3 className="text-xl font-bold text-white mb-6">üîê Change Password</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-2">Current Password</label>
                <input
                  type="password"
                  value={passwordData.currentPassword}
                  onChange={(e) => setPasswordData(prev => ({ ...prev, currentPassword: e.target.value }))}
                  className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white"
                  placeholder="Enter current password"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-2">New Password</label>
                <input
                  type="password"
                  value={passwordData.newPassword}
                  onChange={(e) => setPasswordData(prev => ({ ...prev, newPassword: e.target.value }))}
                  className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white"
                  placeholder="Enter new password (min 8 characters)"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-2">Confirm New Password</label>
                <input
                  type="password"
                  value={passwordData.confirmPassword}
                  onChange={(e) => setPasswordData(prev => ({ ...prev, confirmPassword: e.target.value }))}
                  className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white"
                  placeholder="Confirm new password"
                />
              </div>
              <button
                onClick={handleChangePassword}
                className="w-full bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg font-semibold"
              >
                Change Password
              </button>
            </div>
          </div>
        </div>

        {/* Store Management - Only for Store Owners */}
        {admin?.role === 'store_owner' && (
          <div className="mt-8">
            <div className="bg-gray-800 border border-gray-700 rounded-xl p-6">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-xl font-bold text-white">üè™ Store Management</h3>
                <button
                  onClick={() => setShowCreateStore(true)}
                  className="flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg"
                >
                  <span className="mr-2">‚ûï</span>
                  Create New Store
                </button>
              </div>

              {/* Stores List */}
              {stores.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {stores.map((store, index) => (
                    <div key={index} className="bg-gray-700 border border-gray-600 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <h4 className="text-lg font-semibold text-white">{store.storeName}</h4>
                        <span className={`px-2 py-1 rounded-full text-xs font-semibold ${
                          store.status === 'active' 
                            ? 'bg-green-900/30 text-green-400 border border-green-500/30'
                            : 'bg-red-900/30 text-red-400 border border-red-500/30'
                        }`}>
                          {store.status.toUpperCase()}
                        </span>
                      </div>
                      
                      <div className="space-y-2 text-sm">
                        <div>
                          <span className="text-gray-400">Store ID: </span>
                          <span className="text-yellow-400 font-mono">{store.storeId}</span>
                        </div>
                        <div>
                          <span className="text-gray-400">Address: </span>
                          <span className="text-white">{store.address}, {store.city}, {store.state} {store.zipCode}</span>
                        </div>
                        <div>
                          <span className="text-gray-400">Phone: </span>
                          <span className="text-white">{store.phone}</span>
                        </div>
                        <div className="grid grid-cols-2 gap-4 pt-2 border-t border-gray-600">
                          <div>
                            <span className="text-gray-400">Machines: </span>
                            <span className="text-blue-400 font-semibold">{store.machineCount}</span>
                          </div>
                          <div>
                            <span className="text-gray-400">Monthly Revenue: </span>
                            <span className="text-green-400 font-semibold">${store.monthlyRevenue?.toLocaleString()}</span>
                          </div>
                        </div>
                      </div>
                      
                      <div className="mt-4 flex space-x-2">
                        <button
                          onClick={() => window.location.href = `/admin/store/machines?store=${store.storeId}`}
                          className="flex-1 bg-blue-600 hover:bg-blue-700 px-3 py-2 rounded text-sm font-semibold"
                        >
                          Manage
                        </button>
                        <button
                          onClick={() => alert(`Store analytics for ${store.storeName}`)}
                          className="flex-1 bg-purple-600 hover:bg-purple-700 px-3 py-2 rounded text-sm font-semibold"
                        >
                          Analytics
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-12">
                  <div className="text-gray-400 mb-4">No stores created yet</div>
                  <button
                    onClick={() => setShowCreateStore(true)}
                    className="bg-green-600 hover:bg-green-700 px-6 py-3 rounded-lg font-semibold"
                  >
                    Create Your First Store
                  </button>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Create Store Modal */}
        {showCreateStore && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-gray-800 border border-gray-700 rounded-xl p-6 max-w-md w-full mx-4 max-h-screen overflow-y-auto">
              <h3 className="text-xl font-bold text-white mb-4">üè™ Create New Store</h3>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-400 mb-1">Store Name *</label>
                  <input
                    type="text"
                    value={storeData.storeName}
                    onChange={(e) => setStoreData(prev => ({ ...prev, storeName: e.target.value }))}
                    className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white"
                    placeholder="Nashville Downtown Gaming"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-400 mb-1">Address</label>
                  <input
                    type="text"
                    value={storeData.address}
                    onChange={(e) => setStoreData(prev => ({ ...prev, address: e.target.value }))}
                    className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white"
                    placeholder="123 Broadway"
                  />
                </div>

                <div className="grid grid-cols-2 gap-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-400 mb-1">City *</label>
                    <input
                      type="text"
                      value={storeData.city}
                      onChange={(e) => setStoreData(prev => ({ ...prev, city: e.target.value }))}
                      className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white"
                      placeholder="Nashville"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-400 mb-1">State *</label>
                    <select
                      value={storeData.state}
                      onChange={(e) => setStoreData(prev => ({ ...prev, state: e.target.value }))}
                      className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white"
                    >
                      <option value="">Select...</option>
                      <option value="TN">Tennessee</option>
                      <option value="AL">Alabama</option>
                      <option value="GA">Georgia</option>
                      <option value="KY">Kentucky</option>
                      <option value="NC">North Carolina</option>
                      <option value="SC">South Carolina</option>
                      <option value="VA">Virginia</option>
                      <option value="FL">Florida</option>
                    </select>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-400 mb-1">ZIP Code</label>
                    <input
                      type="text"
                      value={storeData.zipCode}
                      onChange={(e) => setStoreData(prev => ({ ...prev, zipCode: e.target.value }))}
                      className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white"
                      placeholder="37203"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-400 mb-1">Phone</label>
                    <input
                      type="tel"
                      value={storeData.phone}
                      onChange={(e) => setStoreData(prev => ({ ...prev, phone: e.target.value }))}
                      className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white"
                      placeholder="615-555-0123"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-400 mb-1">Store Manager Email (Optional)</label>
                  <input
                    type="email"
                    value={storeData.managerEmail}
                    onChange={(e) => setStoreData(prev => ({ ...prev, managerEmail: e.target.value }))}
                    className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white"
                    placeholder="manager@store.com"
                  />
                </div>

                {/* Store ID Preview */}
                {storeData.storeName && storeData.city && storeData.state && (
                  <div className="bg-blue-900/20 border border-blue-500/30 rounded-lg p-3">
                    <div className="text-sm text-blue-200">Generated Store ID:</div>
                    <div className="text-blue-400 font-mono font-semibold">
                      {generateStoreId(storeData.storeName, storeData.city, storeData.state)}
                    </div>
                  </div>
                )}

                <div className="flex space-x-3 pt-4">
                  <button
                    onClick={() => {
                      setShowCreateStore(false);
                      setStoreData({
                        storeName: '',
                        address: '',
                        city: '',
                        state: '',
                        zipCode: '',
                        phone: '',
                        managerEmail: ''
                      });
                    }}
                    className="flex-1 bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded-lg"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleCreateStore}
                    disabled={!storeData.storeName || !storeData.city || !storeData.state}
                    className="flex-1 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed px-4 py-2 rounded-lg font-semibold"
                  >
                    Create Store
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
